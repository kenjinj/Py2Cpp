#ifndef LEX_H
#define LEX_H

#include <iostream>
#include <fstream>
#include <unordered_map>

using namespace std;

enum token_type {NONE = -1, EOF_T, ERROR_T, IDENT_T, INTLIT_T, FLTLIT_T, STRLIT_T,
                 CHARLIT_T, AND_T, AS_T, ASSERT_T, BREAK_T, CLASS_T, CONT_T, DEF_T,
                 DEL_T, ELIF_T, ELSE_T, EXCEPT_T, EXEC_T, FINALLY_T, FOR_T, FROM_T,
                 GLOBAL_T, IF_T, IMPORT_T, IN_T, IS_T, LAMBDA_T, NOT_T, OR_T, PASS_T,
                 RAISE_T, RETURN_T, TRY_T, WHILE_T, WITH_T, YIELD_T, TRUE_T, FALSE_T,
                 NONE_T, NL_T, CR_T, TAB_T, PLUS_T, MINUS_T, MULT_T, EXP_T, DIV_T,
                 IDIV_T, MOD_T, LT_T, GT_T, LTE_T, GTE_T, EQUAL_T, NOTEQ_T,
                 LPAREN_T, RPAREN_T, LBRACKET_T, RBRACKET_T, LBRACE_T, RBRACE_T,
                 AT_T, COMMA_T, COLON_T, PERIOD_T, ASSIGN_T, SEMI_T, PLUSEQ_T,
                 MINUSEQ_T, MULTEQ_T, DIVEQ_T, IDIVEQ_T, MODEQ_T, EXPEQ_T, ABS_T,
                 ALL_T, ANY_T, ASCII_T, BIN_T, BOOL_T, BYTEARR_T, BYTE_T, CHR_T,
                 DICT_T, DIR_T, DIVMD_T, ENUMR_T, FILTR_T, FLOAT_T, FRMT_T, FZSET_T, GATTR_T,
                 GLBLS_T, HATTR_T, HASH_T, HEX_T, INPUT_T, INT_T, ITER_T, LEN_T, 
                 LIST_T, MAP_T, MAX_T, MIN_T, NEXT_T, OBJ_T, OCT_T, OPEN_T, POW_T,
                 PRINT_T, RANGE_T, RVS_T, ROUND_T, SET_T, SLICE_T, SRTD_T, STR_T,
                 SUM_T, SUP_T, TUPL_T, NUM_TOKENS};

class LexicalAnalyzer 
{
    public:
	LexicalAnalyzer (char * filename);
	~LexicalAnalyzer ();
	token_type GetToken ();
	string GetTokenName (token_type t) const;
	string GetLexeme () const;
	void ReportError (const string & msg);
        ofstream debug;
    private:
        void putback(char last);
        string file;
        string fstub;
	ifstream input;
	ofstream listing;
	token_type token; 
	string line;
	int linenum;
	int pos;
	string lexeme;
        string lexeme_last;
	int errors;
        // Current state
        int cs;
        
        string valid = " a_0.\n\r\t+-*/%<>=!()[]{}@,:;\"\'#\\";
        
        unordered_map<string, token_type> keyword_map = {
            {"and",AND_T},
            {"as",AS_T},
            {"assert",ASSERT_T},
            {"break",BREAK_T},
            {"class",CLASS_T},
            {"continue",CONT_T},
            {"def",DEF_T},
            {"del",DEL_T},
            {"elif",ELIF_T},
            {"else",ELSE_T},
            {"except",EXCEPT_T},
            {"exec",EXEC_T},
            {"finally",FINALLY_T},
            {"for",FOR_T},
            {"from",FROM_T},
            {"global",GLOBAL_T},
            {"if",IF_T},
            {"import",IMPORT_T},
            {"in",IN_T},
            {"is",IS_T},
            {"lambda",LAMBDA_T},
            {"not",NOT_T},
            {"or",OR_T},
            {"pass",PASS_T},
            {"raise",RAISE_T},
            {"return",RETURN_T},
            {"try",TRY_T},
            {"while",WHILE_T},
            {"with",WITH_T},
            {"yield",YIELD_T},
            {"TRUE",TRUE_T},
            {"FALSE",FALSE_T},
            {"None",NONE_T},
            {"abs",ABS_T},
            {"all",ALL_T},
            {"any",ANY_T},
            {"ascii",ASCII_T},
            {"bin",BIN_T},
            {"bool",BOOL_T},
            {"bytearray",BYTEARR_T},
            {"bytes",BYTE_T},
            {"chr",CHR_T},
            {"dict",DICT_T},
            {"dir",DIR_T},
            {"divmod",DIVMD_T},
            {"enumerate",ENUMR_T},
            {"filter",FILTR_T},
            {"float",FLOAT_T},
            {"format",FRMT_T},
            {"frozenset",FZSET_T},
            {"getattr",GATTR_T},
            {"globals",GLBLS_T},
            {"hasattr",HATTR_T},
            {"hash",HASH_T},
            {"hex",HEX_T},
            {"input",INPUT_T},
            {"int",INT_T},
            {"iter",ITER_T},
            {"len",LEN_T},
            {"list",LIST_T},
            {"map",MAP_T},
            {"max",MAX_T},
            {"min",MIN_T},
            {"next",NEXT_T},
            {"object",OBJ_T},
            {"oct",OCT_T},
            {"open",OPEN_T},
            {"pow",POW_T},
            {"print",PRINT_T},
            {"range",RANGE_T},
            {"reversed",RVS_T},
            {"round",ROUND_T},
            {"set",SET_T},
            {"slice",SLICE_T},
            {"sorted",SRTD_T},
            {"str",STR_T},
            {"sum",SUM_T},
            {"super",SUP_T},
            {"tuple",TUPL_T}
        };
        
        const int stateTable[63][33] = {
            {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
            {-1,62,2,2,4,7,9,10,11,12,15,18,24,30,33,36,39,42,44,45,46,47,48,49,50,51,52,54,55,57,59,-1,-1},
            {-1,3,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {-1,5,5,5,4,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,8,8,8,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-1,-1},
            {-1,53,53,53,6,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {-1,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {-1,23,23,23,23,23,23,23,23,23,23,19,23,23,23,23,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-1,-1},
            {-1,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {-1,29,29,29,29,29,29,29,29,29,29,29,25,29,29,29,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-1,-1},
            {-1,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {-1,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {-1,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {-1,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {-1,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,55,55,60,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,57,61,-1},
            {-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1},
            {-1,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59},
            {-1,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-1},
            {-1,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-1},
            {-1,62,2,2,4,7,9,10,11,12,15,18,24,30,33,36,39,42,44,45,46,47,48,49,50,51,52,54,55,57,59,-1,-1}
        };
        
        const string reference[NUM_TOKENS] = {
            "EOF_T", "ERROR_T", "IDENT_T", "INTLIT_T", "FLTLIT_T", "STRLIT_T",
            "CHARLIT_T", "AND_T", "AS_T", "ASSERT_T", "BREAK_T", "CLASS_T", "CONT_T", "DEF_T",
            "DEL_T", "ELIF_T", "ELSE_T", "EXCEPT_T", "EXEC_T", "FINALLY_T", "FOR_T", "FROM_T",
            "GLOBAL_T", "IF_T", "IMPORT_T", "IN_T", "IS_T", "LAMBDA_T", "NOT_T", "OR_T", "PASS_T",
            "RAISE_T", "RETURN_T", "TRY_T", "WHILE_T", "WITH_T", "YIELD_T", "TRUE_T", "FALSE_T",
            "NONE_T", "NL_T", "CR_T", "TAB_T", "PLUS_T", "MINUS_T", "MULT_T", "EXP_T", "DIV_T",
            "IDIV_T", "MOD_T", "LT_T", "GT_T", "LTE_T", "GTE_T", "EQUAL_T", "NOTEQ_T",
            "LPARENT_T", "RPAREN_T", "LBRACKET_T", "RBRACKET_T", "LBRACE_T", "RBRACE_T",
            "AT_T", "COMMA_T", "COLON_T", "PERIOD_T", "ASSIGN_T", "SEMI_T", "PLUSEQ_T",
            "MINUSEQ_T", "MULTEQ_T", "DIVEQ_T", "IDIVEQ_T", "MODEQ_T", "EXPEQ_T", "ABS_T",
            "ALL_T", "ANY_T", "ASCII_T", "BIN_T", "BOOL_T", "BYTEARR_T", "BYTE_T", "CHR_T",
            "DICT_T", "DIR_T", "DIVMD_T", "ENUMR_T", "FILTR_T", "FLOAT_T", "FRMT_T", "FZSET_T", "GATTR_T",
            "GLBLS_T", "HATTR_T", "HASH_T", "HEX_T", "INPUT_T", "INT_T", "ITER_T", "LEN_T", 
            "LIST_T", "MAP_T", "MAX_T", "MIN_T", "NEXT_T", "OBJ_T", "OCT_T", "OPEN_T", "POW_T",
            "PRINT_T", "RANGE_T", "RVS_T", "ROUND_T", "SET_T", "SLICE_T", "SRTD_T", "STR_T",
            "SUM_T", "SUP_T", "TUPL_T"};
};
	
#endif
