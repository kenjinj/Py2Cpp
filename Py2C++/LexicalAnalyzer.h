#ifndef LEX_H
#define LEX_H

#include <iostream>
#include <fstream>

using namespace std;

enum token_type {NONE = -1, EOF_T, ERROR_T, IDENT_T, INTLIT_T, FLTLIT_T, STRLIT_T,
                 CHARLIT_T, AND_T, AS_T, ASSERT_T, BREAK_T, CLASS_T, CONT_T, DEF_T,
                 DEL_T, ELIF_T, ELSE_T, EXCEPT_T, EXEC_T, FINALLY_T, FOR_T, FROM_T,
                 GLOBAL_T, IF_T, IMPORT_T, IN_T, IS_T, LAMBDA_T, NOT_T, OR_T, PASS_T,
                 RAISE_T, RETURN_T, TRY_T, WHILE_T, WITH_T, YIELD_T, TRUE_T, FALSE_T,
                 NONE_T, NL_T, CR_T, TAB_T, PLUS_T, MINUS_T, MULT_T, EXP_T, DIV_T,
                 IDIV_T, MOD_T, LT_T, GT_T, LTE_T, GTE_T, EQUAL_T, NOTEQ_T,
                 LPARENT_T, RPAREN_T, LBRACKET_T, RBRACKET_T, LBRACE_T, RBRACE_T,
                 AT_T, COMMA_T, COLON_T, PERIOD_T, ASSIGN_T, SEMI_T, PLUSEQ_T,
                 MINUSEQ_T, MULTEQ_T, DIVEQ_T, IDIVEQ_T, MODEQ_T, EXPEQ_T, ABS_T,
                 ALL_T, ANY_T, ASCII_T, BIN_T, BOOL_T, BYTEARR_T, BYTE_T, CHR_T,
                 DICT_T, DIR_T, DIVMD_T, ENUMR_T, FILTR_T, FRMT_T, FZSET_T, GATTR_T,
                 GLBLS_T, HATTR_T, HASH_T, HEX_T, INPUT_T, INT_T, ITER_T, LEN_T, 
                 LIST_T, MAP_T, MAX_T, MIN_T, NEXT_T, OBJ_T, OCT_T, OPEN_T, POW_T,
                 PRINT_T, RANGE_T, RVS_T, ROUND_T, SET_T, SLICE_T, SRTD_T, STR_T,
                 SUM_T, SUP_T, TUPL_T, NUM_TOKENS};

class LexicalAnalyzer 
{
    public:
	LexicalAnalyzer (char * filename);
	~LexicalAnalyzer ();
	token_type GetToken ();
	string GetTokenName (token_type t) const;
	string GetLexeme () const;
	void ReportError (const string & msg);
    private:
        void putback();
	ifstream input;
	ofstream listing;
	ofstream debug;
	token_type token;
	string line;
	int linenum;
	int pos;
	string lexeme;
	int errors;
        // Current state
        int cs;
        
        string valid = " a_0.\n\r\t+-*/%<>=!()[]{}@,:;\"\'#\\";
        
        const int stateTable[62][31] = {
            {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
            {1,2,2,4,7,9,10,11,12,15,18,24,30,33,36,39,42,44,45,46,47,48,49,50,51,52,54,55,57,59,-1},
            {3,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {5,5,5,4,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {8,8,8,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-1},
            {53,53,53,6,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {23,23,23,23,23,23,23,23,23,23,19,23,23,23,23,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-1},
            {21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {29,29,29,29,29,29,29,29,29,29,29,25,29,29,29,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-1},
            {27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,55,55,60},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,61},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},
            {55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55},
            {57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57}};
        
        const string reference[NUM_TOKENS] = {
            "EOF_T", "ERROR_T", "IDENT_T", "INTLIT_T", "FLTLIT_T", "STRLIT_T",
            "CHARLIT_T", "AND_T", "AS_T", "ASSERT_T", "BREAK_T", "CLASS_T", "CONT_T", "DEF_T",
            "DEL_T", "ELIF_T", "ELSE_T", "EXCEPT_T", "EXEC_T", "FINALLY_T", "FOR_T", "FROM_T",
            "GLOBAL_T", "IF_T", "IMPORT_T", "IN_T", "IS_T", "LAMBDA_T", "NOT_T", "OR_T", "PASS_T",
            "RAISE_T", "RETURN_T", "TRY_T", "WHILE_T", "WITH_T", "YIELD_T", "TRUE_T", "FALSE_T",
            "NONE_T", "NL_T", "CR_T", "TAB_T", "PLUS_T", "MINUS_T", "MULT_T", "EXP_T", "DIV_T",
            "IDIV_T", "MOD_T", "LT_T", "GT_T", "LTE_T", "GTE_T", "EQUAL_T", "NOTEQ_T",
            "LPARENT_T", "RPAREN_T", "LBRACKET_T", "RBRACKET_T", "LBRACE_T", "RBRACE_T",
            "AT_T", "COMMA_T", "COLON_T", "PERIOD_T", "ASSIGN_T", "SEMI_T", "PLUSEQ_T",
            "MINUSEQ_T", "MULTEQ_T", "DIVEQ_T", "IDIVEQ_T", "MODEQ_T", "EXPEQ_T", "ABS_T",
            "ALL_T", "ANY_T", "ASCII_T", "BIN_T", "BOOL_T", "BYTEARR_T", "BYTE_T", "CHR_T",
            "DICT_T", "DIR_T", "DIVMD_T", "ENUMR_T", "FILTR_T", "FRMT_T", "FZSET_T", "GATTR_T",
            "GLBLS_T", "HATTR_T", "HASH_T", "HEX_T", "INPUT_T", "INT_T", "ITER_T", "LEN_T", 
            "LIST_T", "MAP_T", "MAX_T", "MIN_T", "NEXT_T", "OBJ_T", "OCT_T", "OPEN_T", "POW_T",
            "PRINT_T", "RANGE_T", "RVS_T", "ROUND_T", "SET_T", "SLICE_T", "SRTD_T", "STR_T",
            "SUM_T", "SUP_T", "TUPL_T"};
};
	
#endif
