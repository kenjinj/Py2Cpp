Grammar.part1 : <file_input> -> NL_T <file_input>
Grammar.part1 : <file_input> -> <stmt> <file_input>
Grammar.part1 : <file_input> -> EOF_T
Grammar.part1 : <decorator> -> AT_T <dotted_name> <d_option> NL_T
Grammar.part1 : <d_option> -> {}
Grammar.part1 : <d_option> -> LPAREN_T <dec_arglist> RPAREN_T
Grammar.part1 : <dec_arglist> -> {}
Grammar.part1 : <dec_arglist> -> <arglist>
Grammar.part1 : <decorators> -> <decorator> <d_option>
Grammar.part1 : <d_option> -> <decorator> <d_option>
Grammar.part1 : <d_option> -> {}
Grammar.part1 : <decorated> -> <decorators> <def_o>
Grammar.part1 : <def_o> -> <classdef>
Grammar.part1 : <def_o> -> <funcdef>
Grammar.part1 : <funcdef> -> DEF_T IDENT_T <parameters> COLON_T <suite>
Grammar.part1 : <parameters> -> LPAREN_T <val_option> RPAREN_T
Grammar.part1 : <val_option> -> {}
Grammar.part1 : <val_option> -> <varargslist> 
Grammar.part1 : <varaglist> -> <V1> MULT_T  IDENT_T <V2_V3>
Grammar.part1 : <V2_V3> -> <V2>
Grammar.part1 : <V2_V3> -> <V3>
Grammar.part1 : <V1> -> <fpdef> <V0> COMMA_T <V1>
Grammar.part1 : <V1> -> {}
Grammar.part1 : <V0> -> {}
Grammar.part1 : <V0> -> ASSIGN_T <test>
Grammar.part1 : <V2> -> MULT_T  IDENT_T <V4>
Grammar.part1 : <V2> -> EXP_T IDENT_T
Grammar.part1 : <V4> -> {}
Grammar.part1 : <V4> -> COMMA_T EXP_T IDENT_T
Grammar.part1 : <V3> -> <fpdef> <V5> <V6> <optComma>
Grammar.part1 : <V5> -> {}
Grammar.part1 : <V5> -> ASSIGN_T <test>
Grammar.part1 : <V6> -> {}
Grammar.part1 : <V6> -> COMMA_T <fpdef> <V7> <V6>
Grammar.part1 : <V7> -> {}
Grammar.part1 : <V7> -> ASSIGN_T <test>
Grammar.part1 : <optComma> -> {}
Grammar.part1 : <optComma> -> COMMA_T
Grammar.part1 : <fpdef> -> IDENT_T
Grammar.part1 : <fpdef> -> LPAREN_T <fplist> RPAREN_T
Grammar.part1 : <fplist> -> <fpdef> <fpdef_opt>  <optComma>
Grammar.part1 : <fpdef_opt> -> {}
Grammar.part1 : <fpdef_opt> -> COMMA_T <fpdef> <fpdef_opt>
Grammar.part1 : <optComma> -> {}
Grammar.part1 : <optComma> -> COMMA_T
Grammar.part1 : <stmt> -> <simple_stmt>
Grammar.part1 : <stmt> -> <compound_stmt>
Grammar.part2 : <augassign> -> PLUSEQ_T
Grammar.part2 : <augassign> -> MINUSEQ_T
Grammar.part2 : <augassign> -> DIVEQ_T
Grammar.part2 : <augassign> -> MODEQ_T
Grammar.part2 : <augassign> -> '&='
Grammar.part2 : <augassign> -> ‘|=’
Grammar.part2 : <augassign> -> ‘^=’
Grammar.part2 : <augassign> -> ‘<<=’
Grammar.part2 : <augassign> -> ‘>>=’
Grammar.part2 : <augassign> -> EXPEQ_T
Grammar.part2 : <augassign> -> IDIVEQ_T
Grammar.part2 : <print_stmt> -> ‘print’ <print_tail>
Grammar.part2 : <print_tail> -> <optprint_tail>
Grammar.part2 : <print_tail> -> ‘>>’ <test> <print_element>
Grammar.part2 : <optprint_tail> -> {}
Grammar.part2 : <optprint_tail> -> <test> <print_rec> <optcomma>
Grammar.part2 : <print_rec> -> ‘,’ <test> <print_rec>
Grammar.part2 : <print_rec> -> ‘, ’<test>
Grammar.part2 : <print_element> -> ‘,’ <test> <print_element> <optcomma>
Grammar.part2 : <print_element> -> ‘,’ <test> <optcomma>
Grammar.part2 : <opt_print_element> -> <print_element>
Grammar.part2 : <opt_print_element> -> {}
Grammar.part2 : <del_stmt> -> ‘del’ <exprlist>
Grammar.part2 : <pass_stmt> -> ‘pass’
Grammar.part2 : <flow_stmt> -> <break_stmt>
Grammar.part2 : <flow_stmt> -> <continue_stmt>
Grammar.part2 : <flow_stmt> -> <return_stmt>
Grammar.part2 : <flow_stmt> -> <raise_stmt>
Grammar.part2 : <flow_stmt> -> <yield_stmt>
Grammar.part2 : <break_stmt> -> ‘break’
Grammar.part2 : <continue_stmt> -> ‘continue’
Grammar.part2 : <return_stmt> -> ‘return’ <opt_testlist>
Grammar.part2 : <opt_testlist> -> <test_list>
Grammar.part2 : <opt_testlist> -> {}
Grammar.part2 : <simple_stmt> -> <small_stmt> <opt_tail> <optsemi> NL_T
Grammar.part2 : <simple_stmt> -> <small_stmt> <opt_tail> <optsemi> CR_T
Grammar.part2 : <opt_tail> -> ‘,’ <small_stmt>
Grammar.part2 : <opt_tail> -> {}
Grammar.part2 : <optsemi> -> ‘;’
Grammar.part2 : <optsemi> -> {}
Grammar.part2 : <small_stmt> -> <expr_stmt>
Grammar.part2 : <small_stmt> -> <print_stmt>
Grammar.part2 : <small_stmt> -> <del_stmt>
Grammar.part2 : <small_stmt> -> <pass_stmt>
Grammar.part2 : <small_stmt> -> <flow_stmt>
Grammar.part2 : <small_stmt> -> <import_stmt>
Grammar.part2 : <small_stmt> -> <global_stmt>
Grammar.part2 : <small_stmt> -> <exec_stmt>
Grammar.part2 : <small_stmt> -> <assert_stmt>
Grammar.part2 : <expr_stmt> -> <testlist>
Grammar.part2 : <testlist> -> <augassign> <yield_expr>
Grammar.part2 : <testlist> -> <augassign> <testlist>
Grammar.part2 : <testlist> -> ‘=’ <yield_expr>
Grammar.part2 : <testlist> -> ‘=’ <testlist>
Grammar.part2 : <testlist> -> {}
Grammar.part3 : <yield_stmt> -> <yield_expr>
Grammar.part3 : <raise_stmt> -> RAISE_T <test> <raise_tail>
Grammar.part3 : <raise_tail> -> {}
Grammar.part3 : <raise_tail> -> COMMA_T <test> <raise_tail2>
Grammar.part3 : <raise_tail2> -> {}
Grammar.part3 : <raise_tail2> -> COMMA_T <test>
Grammar.part3 : <import_stmt> -> <import_name>
Grammar.part3 : <import_stmt> -> <import_from>
Grammar.part3 : <import_name> -> IMPORT_T <dotted_as_name>
Grammar.part3 : <import_from> -> FROM_T <options1> IMPORT_T <options2>
Grammar.part3 : <options1> -> <options3> <dotted_name>
Grammar.part3 : <options1> -> PERIOD_T <options3>
Grammar.part3 : <options2> -> MULT_T
Grammar.part3 : <options2> -> LPAREN_T <import_as_names> RPAREN_T
Grammar.part3 : <options2> -> <import_as_names>
Grammar.part3 : <options3> -> PERIOD_T <options3>
Grammar.part3 : <options3> -> {}
Grammar.part3 : <import_as_name> -> IDENT_T
Grammar.part3 : <import_as_name> -> IDENT_T AS_T IDENT_T
Grammar.part3 : <dotted_as_name> -> <dotted_name>
Grammar.part3 : <dotted_as_name> -> AS_T IDENT_T
Grammar.part3 : <import_as_names> -> <import_as_name> 
Grammar.part3 : <import_as_names> -> COMMA_T <import_as_name>
Grammar.part3 : <import_as_names> -> COMMA_T <import_as_name> COMMA_T
Grammar.part3 : <dotted_as_names> -> <dotted_as_name>
Grammar.part3 : <dotted_as_names> -> COMMA_T <dotted_as_name>
Grammar.part3 : <dotted_name> -> IDENT_T <dotted_name_period>
Grammar.part3 : <dotted_name_period> -> PERIOD_T IDENT_T <dotted_name_period>
Grammar.part3 : <dotted_name_period> -> {}
Grammar.part4 : <global_stmt> -> GLOBAL_T IDENT_T <global_stmt_tail>
Grammar.part4 : <global_stmt_tail> -> COMMA_T IDENT_T <global_stmt_tail>
Grammar.part4 : <global_stmt_tail> -> LAMBDA_T
Grammar.part4 : <exec_stmt> -> EXEC_T <expr> <exec_stmt_tail>
Grammar.part4 : <exec_stmt_tail> -> IN_T <test> <exec_stmt_tail_tail>
Grammar.part4 : <exec_stmt_tail_tail> -> COMMA_T <test>
Grammar.part4 : <exec_stmt_tail> -> {}
Grammar.part4 : <exec_stmt_tail_tail> -> {}
Grammar.part4 : <assert_stmt> -> ASSERT_T <test> <assert_stmt_tail>
Grammar.part4 : <assert_stmt_tail> -> COMMA_T <test>
Grammar.part4 : <assert_stmt_tail> -> {}
Grammar.part4 : <compund_stmt> -> <if_stmt>
Grammar.part4 : <compund_stmt> -> <while_stmt>
Grammar.part4 : <compund_stmt> -> <for_stmt>
Grammar.part4 : <compund_stmt> -> <try_stmt>
Grammar.part4 : <compund_stmt> -> <with_stmt>
Grammar.part4 : <compund_stmt> -> <funcdef>
Grammar.part4 : <compund_stmt> -> <class>
Grammar.part4 : <compund_stmt> -> <def>
Grammar.part4 : <compund_stmt> -> <decorated>
Grammar.part4 : <if_stmt> -> IF_T <test> COLON_T <suite> <else_stmt>
Grammar.part4 : <else_stmt> -> ELSE_T COLON_T <suite>
Grammar.part4 : <else_stmt> -> {}
Grammar.part4 : <while_stmt> -> WHILE_T <test> COLON_T <suite> <else_stmt>
Grammar.part4 : <with_item> -> <test> <test_tail>
Grammar.part4 : <test_tail> -> AS_T <expo>
Grammar.part4 : <test_tail> -> {}
Grammar.part4 : <with_stmt> -> WITH_T <with_time> <with_stmt_tail> : <suite>
Grammar.part4 : <with_stmt_tail> -> COMMA_T <with_item> <with_stmt_tail>
Grammar.part4 : <with_stmt_tail> -> {}
Grammar.part4 : <try_stmt> -> TRY_T : <suite> <try_stmt_excp> <try_stmt_excp_tail>
Grammar.part4 : <try_stmt> -> TRY_T : <suite> <try_stmt_fin> 
Grammar.part4 : <try_stmt_excp> -> <except_clause> : <suite>
Grammar.part4 : <try_stmt_excp> -> {}
Grammar.part4 : <try_stmt_excp_tail> -> <try_stmt_else> <try_stmt_fin>
Grammar.part4 : <try_stmt_excp_tail> -> <try_stmt_fin>
Grammar.part4 : <try_stmt_excp_tail> -> {}
Grammar.part4 : <try_stmt_else> -> ELSE_T : <suite>
Grammar.part4 : <try_stmt_fin> -> FINALLY_T : <suite>
Grammar.part5 : <except_clause> -> <except> <except_clause_test>
Grammar.part5 : <except_clause_test> -> <test>
Grammar.part5 : <except_clause_test> -> <test> AS_T <test>
Grammar.part5 : <except_clause_test> -> <test> COMMA_T <test>
Grammar.part5 : <suite> -> <simple_stmt>
Grammar.part5 : <suite> -> NL_T INDENT <stmt_list> DEDENT
Grammar.part5 : <stmt_list> -> <stmt> <stmt_list_tail>
Grammar.part5 : <stmt_list_tail> -> <stmt_list>
Grammar.part5 : <stmt_list_tail> -> {}
Grammar.part5 : <testlist_safe> -> <old_test> <testlist_safe_old_test_option>
Grammar.part5 : <testlist_safe_old_test_option> -> <testlist_safe_old_test_list>
Grammar.part5 : <testlist_safe_old_test_option> -> {}
Grammar.part5 : <testlist_safe_old_test_list> -> COMMA_T <old_test> <testlist_safe_old_test_lst_tail>
Grammar.part5 : <testlist_safe_old_test_lst_tail> -> <testlist_safe_old_test_list>
Grammar.part5 : <testlist_safe_old_test_lst_tail> -> <comma>
Grammar.part5 : <old_test> -> <or_test>
Grammar.part5 : <old_test> -> <old_lambdef>
Grammar.part5 : <old_lambfef> -> LAMBDA_T <vargslist_option> COLON_T <old_test>
Grammar.part5 : <vargslist_optioin> -> <vargslist>
Grammar.part5 : <vargslist_option> -> {}
Grammar.part5 : <test> -> <or_test> <if_else_test_option>
Grammar.part5 : <test> -> <lambdef>
Grammar.part5 : <if_else_test_option> -> IF_T <or_test> ELSE_T <test>
Grammar.part5 : <if_else_test_option> -> {}
Grammar.part5 : <or_test> -> <and_test> <or_and_test_list_option_>
Grammar.part5 : <or_and_test_list_option> -> OR_T <and_test> <or_and_test_list_option>
Grammar.part5 : <or_and_test_list_option> -> {}
Grammar.part5 : <and_test> -> <not_test> <and_not_test_list_option>
Grammar.part5 : <and_not_test_list_option> -> AND_T <and_test> <and_not_test_list_option>
Grammar.part5 : <and_not_test_list_option> -> {}
Grammar.part5 : <not_test> -> NOT_T <not_test>
Grammar.part5 : <not_test> -> <comparison>
Grammar.part5 : <comparison> -> <expr> <comp_op_expr_list_option>
Grammar.part5 : <comp_op_expr_list_option> -> {}
Grammar.part5 : <comp_op> -> LT_T
Grammar.part5 : <comp_op> -> GT_T
Grammar.part5 : <comp_op> -> EQUAL_T
Grammar.part5 : <comp_op> -> GTE_T
Grammar.part5 : <comp_op> -> LTE_T
Grammar.part5 : <comp_op> -> NOTEQ_T
Grammar.part5 : <comp_op> -> IN_T
Grammar.part5 : <comp_op> -> NOT_T IN_T
Grammar.part5 : <comp_op> -> IS_T
Grammar.part5 : <comp_op> -> IS_T NOT_T
Grammar.part6 : <expr> -> <xor_epr> <expr_xor_expr>
Grammar.part6 : <expr_xor_expr> -> PERIOD_T <xor_expr> <expr_xor_expr>
Grammar.part6 : <expr_xor_expr> -> {}
Grammar.part6 : <xor_expr> -> <and_expr> <expr_and_expr>
Grammar.part6 : <expr_and_expr> -> PERIOD_T <and_expr><expr_and_expr>
Grammar.part6 : <expr_and_expr> -> {}
Grammar.part6 : <and_expr> -> <shift_expr> <expr_shift_expr>
Grammar.part6 : <expr_shift_expr> -> PERIOD_T <shift_expr> <expr_shift_expr>
Grammar.part6 : <expr_shift_expr> -> {}
Grammar.part6 : <shift_expr> -> <arith_expr> <expr_arith_expr>
Grammar.part6 : <expr_arith_expr> -> <shift_dir> <arith_expr> <expr_arith_expr>
Grammar.part6 : <shift_dir> -> '<<'
Grammar.part6 : <shift_dir> -> '>>'
Grammar.part6 : <expr_arith_expr> -> {}
Grammar.part6 : <arith_expr> -> <term> <expr_term>
Grammar.part6 : <expr_term> -> <plus_or_minus> <term> <expr_term>
Grammar.part6 : <plus_or_minus> -> PERIOD_T
Grammar.part6 : <expr_term> -> {}
Grammar.part6 : <term> -> <factor> <expr_factor>
Grammar.part6 : <expr_factor> -> <operator> <factor> <expr_factor>
Grammar.part6 : <operator> -> MULT_T
Grammar.part6 : <operator> -> DIV_T
Grammar.part6 : <operator> -> IDIV_T
Grammar.part6 : <operator> -> PERIOD_T
Grammar.part6 : <expr_factor> -> {}
Grammar.part6 : <factor> -> <factor_options> <factor>
Grammar.part6 : <factor> -> <power>
Grammar.part6 : <factor_options> -> PERIOD_T
Grammar.part6 : <factor_options> -> PERIOD_T
Grammar.part6 : <factor_options> -> PERIOD_T
Grammar.part6 : <power> -> <atom> <recursive_trailer> <opt_expon_fact>
Grammar.part6 : <recursive_trailer> -> <trailer> <recursive_trailer>
Grammar.part6 : <recursive_trailer> -> {}
Grammar.part6 : <opt_expon_fact> -> EXPON_T <factor>
Grammar.part6 : <opt_expon_fact> -> {}
Grammar.part6 : <atom> -> <yexpr_testlistcomp>
Grammar.part6 : <atom> -> <listmaker_opt>
Grammar.part6 : <atom> -> <dictorsetmaker_opt>
Grammar.part6 : <atom> -> <testlist_1>
Grammar.part6 : <atom> -> IDENT_T
Grammar.part6 : <atom> -> <numlit>
Grammar.part6 : <atom> -> <strlit> <string_more>
Grammar.part6 : <string_more> -> <strlit>
Grammar.part6 : <string_more> -> {}
Grammar.part6 : <yexpr_testlistcomp> -> LPAREN_T <yield_option> RPAREN_T
Grammar.part6 : <yield_option> -> <yield_expr>
Grammar.part6 : <yield_option> -> <test_list_comp>
Grammar.part6 : <yield_option> -> {}
Grammar.part6 : <listmaker_opt> -> LBRACKET_T <list_mak_o> RBRACKET_T
Grammar.part6 : <list_mak_o> -> <listmaker>
Grammar.part6 : <list_mak_o> -> {}
Grammar.part6 : <dictorsetmaker_opt> -> LBRACE_T <DSM_O> RBRACE_T
Grammar.part6 : <DSM_O> -> <dictorsetmaker>
Grammar.part6 : <DSM_O> -> {}
Grammar.part6 : <testlist_1> -> PERIOD_T <testlist1> PERIOD_T
Grammar.part6 : <listmaker> -> <test> <test_options>
Grammar.part6 : <test_options> -> <list_for>
Grammar.part6 : <test_options> -> <many_test> <optional_comma>
Grammar.part6 : <many_test> -> COMMA_T <test> <many test>
Grammar.part6 : <many_test> -> {}
Grammar.part7 : <testlist_comp> -> <test> <tlc_options>
Grammar.part7 : <tlc_options> -> <comp_for>
Grammar.part7 : <tlc_options> -> <tlc_multiple> <optcomma>
Grammar.part7 : <tlc_mulitple> -> COMMA_T <test> <tlc_multiple>
Grammar.part7 : <tlc_multiple> -> {}
Grammar.part7 : <lambdef> -> LAMBDA_T <optvarargslist> COLON_T <test>
Grammar.part7 : <trailer> -> LPAREN_T <optargslist> RPAREN_T
Grammar.part7 : <trailer> -> LBRACKET_T <subscriptlist> RBRACKET_T
Grammar.part7 : <trailer> -> PERIOD_T <IDENT_T>
Grammar.part7 : <subscriptlist> -> <subscript> <sub_multiple> <optcomma>
Grammar.part7 : <sub_multiple> -> COMMA_T <subscript> <sub_multiple>
Grammar.part7 : <sub_multiple> -> {}
Grammar.part7 : <subscript> -> PERIOD_T PERIOD_T PERIOD_T
Grammar.part7 : <subscript> -> <test>
Grammar.part7 : <subscript> -> <opttest> COLON_T <opttest> <optsliceop>
Grammar.part7 : <sliceop> -> COLON_T <opttest>
Grammar.part7 : <exprlist> -> <expr> <expr_multiple> <optcomma>
Grammar.part7 : <expr_multiple> -> COMMA_T <expr> <expr_multiple>
Grammar.part7 : <expr_multiple> -> {}
Grammar.part7 : <testlist> -> <test> <test_multiple> <optcomma>
Grammar.part7 : <test_multiple> -> COMMA_T <test> <test_multiple>
Grammar.part7 : <test_multiple> -> {}
Grammar.part7 : <dictorsetmaker> -> <dictor_option1> <dictor_option2>
Grammar.part7 : <dictor_option1> -> <test> COLON_T <test> <option1_options>
Grammar.part7 : <option1_options> -> <comp_for>
Grammar.part7 : <option1_options> -> <option1_multiple> <optcomma>
Grammar.part7 : <option1_multiple> -> COMMA_T <test> COLON_T <test> <option1_multiple>
Grammar.part7 : <option1_multiple> -> {}
Grammar.part7 : <dictor_option2> -> <test> <option2_options>
Grammar.part7 : <option2_options> -> <comp_for>
Grammar.part7 : <option2_options> -> <option2_multiple> <optcomma>
Grammar.part7 : <option2_multiple> -> COMMA_T <test>
Grammar.part7 : <option2_mulitple> -> {}
Grammar.part7 : <classdef> -> CLASS_T <IDENT_T> <opt_test> COLON_T <suite>
Grammar.part7 : <opt_test> -> LPAREN_T <opttestlist> RPAREN_T
Grammar.part7 : <opt_test> -> {}
Grammar.part8 : <arglist> -> <arglist_o1> <arglist_o2>
Grammar.part8 : <arglist_o1> -> <argument> COMMA_T <arglist_o1>
Grammar.part8 : <arglist_o1> -> {}
Grammar.part8 : <arglist_o2> -> <argument> <optcomma>
Grammar.part8 : <arglist_o2> -> MULT_T <test> <arglis_o2_o1> <arglist_o2_o2>
Grammar.part8 : <arglist_o2> -> EXP_T <test>
Grammar.part8 : <argument> -> <test> <comp_for_o>
Grammar.part8 : <argument> -> <test> PERIOD_T <test>
Grammar.part8 : <comp_for_o> -> <comp_for>
Grammar.part8 : <comp_for_o> -> {}
Grammar.part8 : <list_iter> -> <list_for>
Grammar.part8 : <list_iter> -> <list_if>
Grammar.part8 : <list_for> -> FOR_T <exprlist> IN_T <testlist_safe> <list_iter_o>
Grammar.part8 : <list_iter_o> -> <list_iter>
Grammar.part8 : <list_iter_o> -> {}
Grammar.part8 : <list_if> -> <old_test> <list_iter_o>
Grammar.part8 : <comp_iter> -> <comp_for>
Grammar.part8 : <comp_iter> -> <comp_if>
Grammar.part8 : <comp_for> -> FOR_T <exprlist> IN_T <or_test> <comp_iter_o>
Grammar.part8 : <comp_iter_o> -> <comp_iter>
Grammar.part8 : <comp_iter_o> -> {}
Grammar.part8 : <comp_if> -> IF_T <old_test> <comp_iter_o>
Grammar.part8 : <testlist1> -> <test> <testlist1_o>
Grammar.part8 : <testlist1_o> -> COMMA_T <test> <testlist1_o>
Grammar.part8 : <testlist1_o> -> {}
Grammar.part8 : <encoding_decl> -> IDENT_T
Grammar.part8 : <yield_expr> -> YIELD_T <testlist_o>
Grammar.part8 : <testlist_o> -> <testlist>
Grammar.part8 : <testlist_o> -> {}
Grammar.part8 : <arglist_o2_o1> -> COMMA_T <argument> <arglist_o2_o1>
Grammar.part8 : <arglist_o2_o1> -> {}
Grammar.part8 : <arglist_o2_o2> -> COMMA_T MULT_T <test>
Grammar.part8 : <arglist_o2_o2> -> {}
